This Piece-Table implementation uses a linked list of nodes/pieces;
Simply because they're easy to reason about, makes undo/redo easy,
and means data doesn't have to be contigious.
There is a plan to use a cache for the most recently used piece,
this should make lookups faster.

Saving procedure is currently not written, as I am not sure about
how to go about it efficiently.

All in all, I've used 3 main data structures for my Piece-Table:
1. Arenas
2. Free-Lists.
3. Linked Lists.

All pieces and append data are stored in what's referred to as memory blocks.
A memory block has a header containing four variables:
1. Pointer to the next block (previous really).
2. Size of the block (excluding header).
3. Node index to grow from.
4. Append index to grow (downwards) from.

# [Next, Size, node_idx, app_idx][ ... ]

To allocate a node, we simply increase the
node_idx by the size of a node and return the address (Like an Arena).
Same applies to append-only data, we increase the index and return.
To prevent these from overlapping,
append data is grown downwards from the top of the block
(Done by subtracting the append index from the block size).

For example, if we append "One", "Two", "Three", it will look like so:
# [Header][Node, Node, Node, ...UNUSED... , "ThreeTwoOne"]
This has the benefit of keeping the different data separate and
zero initialized (besides the block size header).

When a piece is freed, it's simply added to a free-list in the Piece-Table struct.
When a new piece is requested, we either increase the index in our memory block,
or use the free-list of pieces.
When a block is filled up, we can simply allocate a new one and point to it
in the Piece-Table structure.

Freeing all memory is as simple as freeing every block,
as all our data are contained in them.

To make undo pieces simple, I've opt-ed to use a separate free-list for those.
They are allocated by growing the node index from blocks as well,
so block node index is grown from undo structs and piece structs.
Using two different free-lists for undo structs and piece structs allows
for more efficient use of space, rather than make both structs equal in size.

My undo/redo history is linear, as I wasn't sure how else to make it.
Redo history gets deleted upon new edits,
maybe some day I'll figure out how to keep redo history.


Some things to note:
1. When a memory block is allocated (block_s),
   it will allocate at least the size requested or more,
   this means if t.block is not nil, it is totally safe to
   allocate data from it without checking for nil pointers.

2. To set max undos, just do 'table.undo_max = 5'.
   No setters or procedures needed.
   BUT: Changing this value while editing a file might cause issues.
        Only change it right after 'create' procedure, never later.
   I don't see a reason to change this if I'm never gonna need it.

3. Currently, this implementation reuses old nodes/pieces fine,
   but does not reuse stale append-data; I wanna fix that later.

4. If you're appending data after your last insert, this implementation
   does not currently extend the piece, rather it just na√Øvely adds
   another piece.
   This makes future append-data reuse easier&safer.

5. My Piece-Table-Block version allows for repeated/compressed data insertions.
   Basically, if you want to insert GBs of NULL bytes, or any byte sequence
   repeated, you can do so without taking up much memory.
   Inserting 'ABC' with a virtal length of 7 means 'ABCABCA' will be inserted;
   but only 'ABC' will be stored in the append only data.
